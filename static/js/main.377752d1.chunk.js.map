{"version":3,"sources":["components/MainMenu.js","components/OptionsMenu.js","questionAPI/index.js","components/soundbox.js","components/QuestionBoxSpelling.js","components/Result.js","components/Quiz.js","components/ModeMenu.js","index.js"],"names":["MainMenu","props","className","title","direction","type","onClick","updateMode","size","block","disabled","qNumber","OptionsMenu","useState","number","setNumber","defaultValue","min","max","Object","keys","length","onChange","value","marks","step","tipFormatter","modes","setGameOptions","danger","goBack","qBank","options","questionId","SoundBox","antwoord","url","audio","key","Audio","shape","play","Search","Input","QuestionBox","answered","setAnswered","filename","md5","substring","placeholder","onSearch","selected","toLowerCase","console","log","map","option","i","QuestionBoxSpelling","filenames","urls","shuffledUrls","sort","Math","random","span","QuestionBoxSound","Result","style","width","score","numberOfQuestions","playAgain","setGameoption","Quiz","getQuestions","n","state","Promise","resolve","slice","then","randomAnswers","answer","floor","setState","questionBank","computeAnswer","responses","answers","gameOptions","this","correctAnswer","Component","loadGame","selectGame","ModeMenu","Game","Layout","Header","Content","Footer","a","b","c","changeSettings","modeSwitch","modeArray","proficiency","Array","fill","selection","settings","points","subTitle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.377752d1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button, Card, Space, Row, Col} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst MainMenu = (props) => {\r\n  return (\r\n    <div className=\"main-menu\">\r\n      <Card title=\"Select Mode\">\r\n        <div className=\"menu\" >\r\n          <Space direction = \"vertical\">\r\n            <Row className = \"menu-row\"><Button type=\"primary\" onClick={() => props.updateMode(1)} size=\"large\" block>Practice</Button></Row>\r\n            <Row className = \"menu-row\"><Button type=\"default\" onClick={() => props.updateMode(2)} size=\"large\" block disabled>Test</Button></Row>\r\n            <Row className = \"menu-row\"><Button type=\"default\" onClick={() => props.updateMode(3)} size=\"large\" block disabled>Learn</Button></Row>\r\n          </Space>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainMenu;","import React, {useState} from \"react\";\r\nimport {Slider, Button, Space, Row, Checkbox} from \"antd\";\r\n\r\nconst qNumber = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n\r\n\r\n\r\nconst OptionsMenu = (props) => {\r\n  const [number, setNumber] = useState(5);\r\n  return (\r\n    <div className=\"options\">\r\n      <div className = \"menu\">\r\n      <Space direction=\"vertical\">\r\n\r\n        <Row className = \"menu-row\"><h2>How many questions do you want</h2></Row>\r\n          <Row className = \"menu-row\">\r\n        <Slider\r\n          defaultValue={5}\r\n          min={0}\r\n          max={Object.keys(qNumber).length - 1}\r\n          onChange={(value) => {setNumber(value+1)}}\r\n          marks={qNumber}\r\n          step={null}\r\n          tipFormatter={value => qNumber[value]}\r\n        />\r\n          </Row>\r\n\r\n        {props.modes[1] === 1 &&\r\n        <Row className=\"menu-row\">\r\n        <Checkbox\r\n          onChange={() => {(props.updateMode(props.modes[0], props.modes[1], !props.modes[2]))}}\r\n        >\r\n          Hard Mode (type answers)\r\n        </Checkbox></Row>}\r\n\r\n        <Row className = \"menu-row\"><Button block size = \"large\" type=\"primary\" onClick={()=>{props.setGameOptions(number)}}>Let's  Gooo</Button></Row>\r\n        <Row className = \"menu-row\"><Button block size = \"large\" danger onClick={props.goBack}>Go Back</Button></Row>\r\n      </Space>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default OptionsMenu;","const qBank = [\r\n  {\r\n    options: [\"hak\", \"haak\"],\r\n    questionId: \"309456\"\r\n  },\r\n  {\r\n    options: [\"bot\", \"boot\"],\r\n    questionId: \"500\"\r\n  },\r\n  {\r\n    options: [\"mis\", \"mies\"],\r\n    questionId: \"29\"\r\n  },\r\n  {\r\n    options: [\"ui\", \"au\"],\r\n    questionId: \"15\"\r\n  },\r\n  {\r\n    options: [\"mus\", \"moes\"],\r\n    questionId: \"235245\"\r\n  },\r\n  {\r\n    options: [\"reuk\", \"ruk\"],\r\n    questionId: \"2462346\"\r\n  },\r\n  {\r\n    options: [\"veel\", \"viel\"],\r\n    questionId: \"970097\"\r\n  },\r\n  {\r\n    options: [\"aas\", \"as\"],\r\n    questionId: \"34960370\"\r\n  },\r\n  {\r\n    options: [\"ruik\", \"ruk\"],\r\n    questionId: \"2039509\"\r\n  },\r\n  {\r\n    options: [\"pot\", \"poot\"],\r\n    questionId: \"2390472309\"\r\n  },\r\n  {\r\n    options: [\"ziek\", \"zeik\"],\r\n    questionId: \"23095\"\r\n  },\r\n  {\r\n    options: [\"geef\", \"gif\"],\r\n    questionId: \"098\"\r\n  },\r\n\r\n];\r\n\r\nexport default (n) =>\r\n  Promise.resolve(qBank.sort(() => 0.5 - Math.random()).slice(0, n));","import React from \"react\";\r\nimport {SoundFilled} from \"@ant-design/icons/lib\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\n\r\n\r\nconst SoundBox = ({antwoord, url, key})  => {\r\n  /*let filename = \"Nl-\" + antwoord + \".ogg\";\r\n  let url = \"https://upload.wikimedia.org/wikipedia/commons/\" + md5(filename).substring(0,1) + \"/\" + md5(filename).substring(0,2) + \"/\" + filename;\r\n  console.log(url); */\r\n  let audio = new Audio(url);\r\n  const start = () => {\r\n    audio.play()\r\n  }\r\n  return (\r\n    <div className=\"soundBox\">\r\n      <Button type=\"primary\" shape=\"circle\" className=\"audio-button\"\r\n              onClick={start}>\r\n        <SoundFilled/>\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default SoundBox;","import React, {useState} from \"react\";\nimport SoundBox from \"./soundbox\";\nimport {Button, Space, Card, Row, Col, Input} from \"antd\";\nimport md5 from \"md5\";\n\nconst {Search} = Input;\n\n\nconst QuestionBoxSound = (props) => {\n  let title = \"Which one is \" + props.antwoord + \"?\";\n  const [answered, setAnswered] = useState(0);\n\n  let filenames = props.options.map( (option) => (\"Nl-\" + option + \".ogg\"));\n  console.log(filenames);\n  let urls = filenames.map( (filename) => (\"https://upload.wikimedia.org/wikipedia/commons/\" + md5(filename).substring(0,1) + \"/\" + md5(filename).substring(0,2) + \"/\" + filename));\n  let shuffledUrls = urls.sort(() => Math.random() - 0.5);\n  return (\n    <Row>\n      <Card type = \"inner\" className=\"questionBox\" title={title} size=\"small\">\n        <Row /*gutter = {[urls.length * 6 + 6, 18]}*/>\n          {shuffledUrls.map((url, i) => {\n            return (\n              <Col span={24/urls.length}>\n                <SoundBox antwoord = {props.options[i]} url = {url}/>\n              </Col>\n            );\n          })}\n        </Row>\n        <Row /*gutter = {[urls.length * 6 + 6, 18]}*/>\n          {shuffledUrls.map((url, i) => {\n            return (\n              <Col span={24/urls.length}>\n                <Button\n                        className=\"answerBtn\"\n                        onClick={() => {\n                          props.selected(+(props.options[i]===props.antwoord));\n                          setAnswered(i+1);\n                        }\n                        }\n                        disabled={+(answered)}\n                        shape = \"round\"\n                >\n                  {i+1}\n                </Button>\n              </Col>\n            );\n          })}\n        </Row>\n      </Card>\n    </Row>\n  );\n};\n\nconst QuestionBoxSpelling = (props) => {\n    let title = \"Is it \" + props.options[0] + \" or \" + props.options[1] + \"?\";\n    const [answered, setAnswered] = useState(0);\n    let filename = \"Nl-\" + props.antwoord + \".ogg\";\n    let url = \"https://upload.wikimedia.org/wikipedia/commons/\" + md5(filename).substring(0,1) + \"/\" + md5(filename).substring(0,2) + \"/\" + filename;\n\n  return (\n      <Row>\n        <Card type = \"inner\" className=\"questionBox\" title={(!props.modes[2]) ? title : \"What is being said?\"} size=\"small\">\n          <Space direction=\"horizontal\">\n            <SoundBox antwoord = {props.antwoord} url = {url}/>\n            {(!props.modes[2]) ?\n            props.options.map((option, i) =>\n            {\n              return(\n              <Button block\n              onClick={() => {\n              props.selected(+(option === props.antwoord));\n              setAnswered(i + 1);\n            }\n            }\n              disabled={+(answered)}\n              type={(answered === i + 1) ? \"primary\" : \"default\"}\n              >\n              {option}\n              </Button>\n              );\n            }) :\n              <Search placeholder=\"Input Answer\"\n                      onSearch={(value) => {\n                        props.selected(+(value.toLowerCase() === props.antwoord));\n                        console.log(value);\n                        setAnswered(1);\n                      }}\n                      disabled={+(answered)}\n              />\n            }\n\n\n\n          </Space>\n        </Card>\n      </Row>\n    );\n};\n\nconst QuestionBox = (props) => {\n  return (\n    (props.modes[1] === 1) ? QuestionBoxSpelling(props) : QuestionBoxSound(props)\n  );\n}\n\nexport default QuestionBox;","import React from \"react\";\nimport {Button, Space} from \"antd\";\n\nconst Result = (props) => (\n  <Space direction=\"vertical\" style={{width : '100%'}}  className=\"score-board\">\n    <span className=\"score\">You scored {props.score}/ {props.numberOfQuestions} correct answers, ya ding dong</span>\n    <Button size = \"large\" block type = \"primary\" className=\"playBtn\" onClick ={props.playAgain}>\n      Play Again, if you dare...\n    </Button>\n    <Button size=\"large\" block type = \"primary\" onClick={() => {props.setGameoption(0)}}>Change Settings</Button>\n    <Button size = \"large\" block danger className=\"quitButton\" onClick={props.goBack}> Go Back</Button>\n  </Space>\n);\n\nexport default Result;","import React, {Component} from \"react\";\r\nimport \"../assets/style.css\";\r\nimport QuizService from \"../questionAPI\";\r\nimport QuestionBox from \"./QuestionBoxSpelling\";\r\nimport Result from \"./Result\";\r\nimport {Card, Space} from \"antd\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Quiz extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questionBank: [],\r\n      answers: [],\r\n      score: 0,\r\n      responses: 0,\r\n      numberOfQuestions: props.gameOptions[0],\r\n    };\r\n  }\r\n\r\n\r\n\r\n  getQuestions = () => {\r\n    QuizService(this.state.numberOfQuestions).then(options => {\r\n      let randomAnswers = options.map((option) => {\r\n        let answer = option.options[Math.floor(Math.random() * option.options.length)];\r\n        return {\r\n          \"options\": option.options,\r\n          \"questionId\": option.questionId,\r\n          \"correctAnswer\": answer,\r\n        };\r\n      });\r\n      this.setState({\r\n        questionBank: randomAnswers\r\n      });\r\n    });\r\n\r\n  };\r\n\r\n  computeAnswer = (answer) => {\r\n    this.setState({\r\n      score: this.state.score + answer\r\n    });\r\n\r\n    this.setState({\r\n      responses: this.state.responses < this.state.numberOfQuestions ? this.state.responses + 1 : this.state.numberOfQuestions\r\n    });\r\n  }\r\n\r\n  playAgain = () => {\r\n    this.getQuestions();\r\n    this.setState({\r\n      score:0,\r\n      responses:0\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    this.getQuestions();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card title = {(this.props.modes[1] === 1) ? \"Spelling Quiz\" : \"Sound Quiz\"} className=\"container\">\r\n        <Space direction=\"vertical\" className=\"quizSpace\">\r\n        {this.state.questionBank.length > 0 &&\r\n        this.state.responses < this.state.numberOfQuestions &&\r\n        this.state.questionBank.map(\r\n          ({options, questionId, correctAnswer}) => (\r\n            <QuestionBox\r\n              antwoord = {correctAnswer}\r\n              options = {options}\r\n              key={questionId}\r\n              selected={answer => this.computeAnswer(answer)}\r\n              modes = {this.props.modes}\r\n            />\r\n          )\r\n        )}\r\n\r\n        {this.state.responses === this.state.numberOfQuestions ? (\r\n          <Result\r\n            score={this.state.score}\r\n            playAgain={this.playAgain}\r\n            goBack = {this.props.goBack}\r\n            numberOfQuestions = {this.state.numberOfQuestions}\r\n            setGameoption = {this.props.setGameOptions}\r\n          />\r\n        ) : null}\r\n        </Space>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quiz;","import React from \"react\";\r\nimport OptionsMenu from \"./OptionsMenu\";\r\nimport Quiz from \"./Quiz\";\r\nimport {Button, Row, Space, Card} from \"antd\"\r\n\r\n\r\nconst selectGame = (props) => {\r\n  if (props.modes[1] === 0) {\r\n    return (\r\n      <div className=\"menu\">\r\n        <Space direction = \"vertical\">\r\n          <Row className = \"menu-row\"><Button size = \"large\" block onClick={() => props.updateMode(1, 1)} type = \"primary\">Practice Spelling</Button></Row>\r\n          <Row className = \"menu-row\"><Button size = \"large\" block onClick={() => props.updateMode(1, 2)}> Practice Sound Recognition </Button></Row>\r\n          <Row className = \"menu-row\"><Button size = \"large\" block onClick={props.goBack} danger>Go Back</Button></Row>\r\n        </Space>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (<OptionsMenu {...props}/>);\r\n  }\r\n}\r\n\r\nconst loadGame = (props) => {\r\n  if (props.gameOptions[0] === 0) {\r\n    console.log('common');\r\n    return (selectGame(props));\r\n  } else {\r\n    return (<Quiz\r\n      {...props}\r\n    />);\r\n  }\r\n}\r\n\r\nconst ModeMenu = (props) => {\r\n\r\n  let modeNames = [\"Main Menu\", [\"Practice\", \"Spelling\"], [\"Test\", \"Spelling\"], [\"Learn\", \"Sounds\"]];\r\n\r\n  return (\r\n    <Card title={modeNames[props.modes[0]][0]}>\r\n      {loadGame(props)}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ModeMenu;","import React, {Component} from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport MainMenu from \"./components/MainMenu\";\r\nimport ModeMenu from \"./components/ModeMenu\";\r\nimport {PageHeader, Layout} from \"antd\";\r\n\r\nconst {Header, Content, Footer} = Layout;\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      proficiency: Array(6).fill(null),\r\n      modes: [0, 0, false],\r\n      selection: [],\r\n      qBank: [],\r\n      settings: [],\r\n      gameOptions: [0],\r\n      points: [],\r\n    };\r\n  }\r\n\r\n  updateMode = (a, b=0, c = false) => {\r\n    let modes = this.state.modes.slice();\r\n    modes[0] = a;\r\n    modes[1] = b;\r\n    modes[2] = c;\r\n    this.setState({\r\n      modes: modes,\r\n    })\r\n  }\r\n\r\n  setGameOptions = (numberOfQuestions) => {\r\n    let gameOptions = this.state.gameOptions.slice();\r\n    gameOptions[0] = numberOfQuestions;\r\n    this.setState({\r\n      gameOptions: gameOptions,\r\n    })\r\n  }\r\n\r\n  goBack = () => {\r\n    let modes = this.state.modes.slice();\r\n    if(modes[1] === 0){\r\n      modes[0] = 0;\r\n    } else {\r\n      modes[1] = 0;\r\n    }\r\n    this.setGameOptions(0);\r\n    this.setState({\r\n      modes: modes,\r\n    })\r\n  }\r\n\r\n  changeSettings = () => {\r\n    this.setGameOptions(0);\r\n  }\r\n\r\n  modeSwitch = (modeArray) => {\r\n    /* if(modeArray[1] === 0) { */\r\n        if (modeArray[0] === 0) {\r\n          return (\r\n            <MainMenu\r\n              updateMode={this.updateMode}\r\n            />\r\n          );\r\n        } else {\r\n          return (\r\n            <ModeMenu\r\n              modes = {modeArray}\r\n              goBack={this.goBack}\r\n              updateMode={this.updateMode}\r\n              setGameOptions = {this.setGameOptions}\r\n              gameOptions = {this.state.gameOptions}\r\n            />\r\n          );\r\n\r\n      }\r\n    /* } else {\r\n      switch (modeArray[1]) {\r\n        case 1:\r\n          return (\r\n            <Quiz goBack = {this.goBack} />\r\n          );\r\n        case 0: {\r\n          return(\r\n            this.modeSwitch(modeArray[0])\r\n          );\r\n        }\r\n        default: {\r\n          return(\r\n            this.modeSwitch(modeArray[0])\r\n          );\r\n        }\r\n      }\r\n\r\n\r\n    } */\r\n}\r\n\r\n\r\n\r\n  render () {\r\n    return(\r\n      <div className=\"Game\">\r\n            <PageHeader title=\"Dutch Vowel App\" subTitle=\"Made by Thomas Jorna\"/>\r\n\r\n            {this.modeSwitch(this.state.modes)}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <Game/>,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}